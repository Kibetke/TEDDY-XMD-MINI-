const { cmd } = require("../command");
const axios = require("axios");

// Verified contact
const quotedContact = {
  key: {
    fromMe: false,
    participant: `0@s.whatsapp.net`,
    remoteJid: "status@broadcast"
  },
  message: {
    contactMessage: {
      displayName: "B.M.B VERIFIED ✅",
      vcard: "BEGIN:VCARD\nVERSION:3.0\nFN:B.M.B VERIFIED ✅\nORG:BMB-TECH BOT;\nTEL;type=CELL;type=VOICE;waid=254769529791:+254769529791\nEND:VCARD"
    }
  }
};

const contextInfo = {
  forwardingScore: 999,
  isForwarded: true,
  forwardedNewsletterMessageInfo: {
    newsletterJid: "120363382023564830@newsletter",
    newsletterName: "𝙽𝙾𝚅𝙰-𝚇𝙼𝙳",
    serverMessageId: 1
  }
};

// Function to handle image generation
async function generateImage(apiUrl, q, reply, conn, m, title) {
  try {
    if (!q) return reply(`
╭───「 *MISSING PROMPT* 」───╮
│ ✏️ Please provide a prompt!
╰──────────────────────────╯
    `.trim(), { quoted: quotedContact, contextInfo });

    await reply("⏳ *Creating Imagine... Please wait.* 🔥");

    const response = await axios.get(apiUrl, { responseType: "arraybuffer" });

    if (!response || !response.data) {
      return reply("❌ API did not return a valid image. Try again later.");
    }

    const imageBuffer = Buffer.from(response.data, "binary");

    await conn.sendMessage(m.chat, {
      image: imageBuffer,
      caption: `🧠 *${title} IMAGE GENERATED BY 𝗡𝗢𝗩𝗔-𝗫𝗠𝗗*\n\n✨ *Prompt:* ${q}`,
      contextInfo
    }, { quoted: quotedContact });

  } catch (error) {
    console.error(`${title} Error:`, error);
    reply(`❌ *Error occurred:* ${error.response?.data?.message || error.message || "Unknown error"}`, { quoted: quotedContact, contextInfo });
  }
}

// FluxAI Command
cmd({
  pattern: "fluxai",
  alias: ["flux", "imagine"],
  react: "🚀",
  desc: "Generate an image using AI (FluxAI).",
  category: "main",
  filename: __filename
}, async (conn, mek, m, { q, reply }) => {
  const apiUrl = `https://api.siputzx.my.id/api/ai/flux?prompt=${encodeURIComponent(q)}`;
  await generateImage(apiUrl, q, reply, conn, m, "FLUX-AI");
});

// Stable Diffusion Command
cmd({
  pattern: "stablediffusion",
  alias: ["sdiffusion", "imagine2"],
  react: "🚀",
  desc: "Generate an image using AI (Stable Diffusion).",
  category: "main",
  filename: __filename
}, async (conn, mek, m, { q, reply }) => {
  const apiUrl = `https://api.siputzx.my.id/api/ai/stable-diffusion?prompt=${encodeURIComponent(q)}`;
  await generateImage(apiUrl, q, reply, conn, m, "STABLE DIFFUSION");
});

// Stability AI Command
cmd({
  pattern: "stabilityai",
  alias: ["stability", "imagine3"],
  react: "🚀",
  desc: "Generate an image using AI (Stability AI).",
  category: "main",
  filename: __filename
}, async (conn, mek, m, { q, reply }) => {
  const apiUrl = `https://api.siputzx.my.id/api/ai/stabilityai?prompt=${encodeURIComponent(q)}`;
  await generateImage(apiUrl, q, reply, conn, m, "STABILITY-AI");
});
